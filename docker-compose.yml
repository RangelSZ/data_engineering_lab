
version: '3.8'
volumes:
  postgres_data:
  clickhouse_data:
  
networks:
  data_lab_network:
    driver: bridge

services:
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow_db 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - data_lab_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse_dw
    environment:
      - CLICKHOUSE_USER=user
      - CLICKHOUSE_PASSWORD=password
      - CLICKHOUSE_DEFAULT_DATABASE=analytics
    ports:
      - "8123:8123" 
      - "9000:9000" 
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      
      - ./clickhouse_init/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - data_lab_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  airflow-init:
    build: . 
    container_name: airflow_init
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    user: "${AIRFLOW_UID}:0" 
    command:
      - bash
      - -c
      - |
        airflow db upgrade
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    networks:
      - data_lab_network
  
  airflow-webserver:
    build: .
    container_name: airflow_webserver
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    user: "${AIRFLOW_UID}:0" 
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow-logs:/opt/airflow/logs 
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - data_lab_network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-scheduler:
    build: .
    container_name: airflow_scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    user: "${AIRFLOW_UID}:0" 
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow-logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    networks:
      - data_lab_network

  data-loader:
    build:
      context: .
      dockerfile: data_loader.Dockerfile
    container_name: data_loader
    depends_on:
      postgres:
        condition: service_healthy
    user: "${AIRFLOW_UID}:0"
    networks:
      - data_lab_network
    command: >
      bash -c "
        echo 'Aguardando 10s para garantir que o Postgres esteja 100% pronto...' &&
        sleep 10 &&
        python /app/load_olist_to_postgres.py
      "